package empleados_crud;

import java.sql.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

/**
 *
 * @author Emmanuel Campos 2022-1855
 */

public class EmpleadosCRUD extends javax.swing.JFrame {
    
    // Decidí usar el modificador protected porque tuve problemas para pasar la conexión a través del constructor de la clase.    
    protected static Connection cn;
    
    /**
     * Constructor de la clase EmpleadosCRUD. Inicializa la interfaz gráfica y carga datos iniciales.
     */
    public EmpleadosCRUD() {
        initComponents();
        mostrarDatos("");
        mcb.setComboOpciones("codDepto", comboCodigoDepartamento);
        mcb.setComboOpciones("codDirector", comboIdJefe);
    }
    
    MetodosComboBox mcb = new MetodosComboBox(cn);
    MetodosFechas mf = new MetodosFechas();
    MetodosBusqueda mb = new MetodosBusqueda();
    MetodosValidacion mv = new MetodosValidacion();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuClickDerecho = new javax.swing.JPopupMenu();
        btnMenuEliminar = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtId = new javax.swing.JTextField();
        txtComision = new javax.swing.JTextField();
        btnActualizar = new javax.swing.JButton();
        btnRegistrar = new javax.swing.JButton();
        comboSexo = new javax.swing.JComboBox<>();
        selectorFechaNacimiento = new com.toedter.calendar.JDateChooser();
        selectorFechaIncorporacion = new com.toedter.calendar.JDateChooser();
        txtNombreEmpleado = new javax.swing.JTextField();
        txtSalario = new javax.swing.JTextField();
        txtCargo = new javax.swing.JTextField();
        comboCodigoDepartamento = new javax.swing.JComboBox<>();
        comboIdJefe = new javax.swing.JComboBox<>();
        comboBuscarPor = new javax.swing.JComboBox<>();
        comboOrdenar = new javax.swing.JComboBox<>();
        comboTipoBusqueda = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaEmpleados = new javax.swing.JTable();
        txtBuscar = new javax.swing.JTextField();
        btnLimpiar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        btnMenuEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados_crud/assets/delete.png"))); // NOI18N
        btnMenuEliminar.setText("Eliminar");
        btnMenuEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuEliminarActionPerformed(evt);
            }
        });
        menuClickDerecho.add(btnMenuEliminar);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Panel de Control");
        setLocation(new java.awt.Point(0, 0));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CRUD Empleados", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Segoe UI", 0, 24), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ingreso de datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 16), new java.awt.Color(0, 0, 0))); // NOI18N

        txtId.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        txtId.setMinimumSize(new java.awt.Dimension(64, 50));
        txtId.setPreferredSize(new java.awt.Dimension(64, 50));

        txtComision.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Comisión", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        btnActualizar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.setEnabled(false);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnRegistrar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        comboSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elegir", "Masculino", "Femenino" }));
        comboSexo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sexo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        comboSexo.setMinimumSize(new java.awt.Dimension(105, 50));
        comboSexo.setPreferredSize(new java.awt.Dimension(105, 50));

        selectorFechaNacimiento.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Fecha de Nacimiento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        selectorFechaNacimiento.setDateFormatString("dd MMMM yyyy");
        selectorFechaNacimiento.setMaxSelectableDate(new java.util.Date(253370782891000L));

        selectorFechaIncorporacion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fecha de Incorporación", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        selectorFechaIncorporacion.setDateFormatString("dd MMMM yyyy");

        txtNombreEmpleado.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre de Empleado", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtSalario.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Salario", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtCargo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cargo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        comboCodigoDepartamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elegir" }));
        comboCodigoDepartamento.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Código de Departamento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        comboIdJefe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elegir", "Ninguno" }));
        comboIdJefe.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ID de Jefe", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        comboBuscarPor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre de Empleado", "ID", "Sexo", "Fecha de Nacimiento", "Fecha de Incorporación", "Salario", "Comisión", "Cargo", "ID de Jefe", "Código de Departamento" }));
        comboBuscarPor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar por", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        comboBuscarPor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBuscarPorActionPerformed(evt);
            }
        });

        comboOrdenar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascendente", "Descendente" }));
        comboOrdenar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ordenar por", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        comboOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOrdenarActionPerformed(evt);
            }
        });

        comboTipoBusqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Empieza por", "Termina con", "Contiene" }));
        comboTipoBusqueda.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tipo de Búsqueda", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        comboTipoBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoBusquedaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboIdJefe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboCodigoDepartamento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboSexo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectorFechaIncorporacion, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(txtComision))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectorFechaNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(txtSalario)
                            .addComponent(txtCargo)))
                    .addComponent(comboBuscarPor, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtNombreEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(comboTipoBusqueda, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboOrdenar, 0, 190, Short.MAX_VALUE))))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombreEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(selectorFechaNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboSexo, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectorFechaIncorporacion, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtComision, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(comboIdJefe, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboCodigoDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(comboBuscarPor, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboTipoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(btnRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(153, 204, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Listado de Empleados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 16), new java.awt.Color(0, 0, 0))); // NOI18N

        tablaEmpleados.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tablaEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaEmpleados.setComponentPopupMenu(menuClickDerecho);
        tablaEmpleados.getTableHeader().setReorderingAllowed(false);
        tablaEmpleados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaEmpleadosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaEmpleados);

        txtBuscar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });

        btnLimpiar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 810, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCampos();
        mostrarDatos("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    /**
     * Maneja el evento del botón "Registrar" del formulario.
     * Guarda los datos del nuevo empleado en la base de datos con la información ingresada en los campos del formulario.
     * Valida que los campos obligatorios no estén vacíos y que los campos numéricos tengan un formato válido.
     * Después de realizar el registro exitoso, muestra un mensaje de éxito y actualiza la tabla de empleados para mostrar el nuevo registro.
     * 
     * @param evt El evento de acción generado por hacer clic en el botón "Registrar".
     */
    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        String id =txtId.getText();
        String nombreEmpleado = txtNombreEmpleado.getText();
        String sexo = mcb.getSexo(comboSexo);
        java.sql.Date fechaNacimiento = mf.getFecha(selectorFechaNacimiento);
        java.sql.Date fechaIncorporacion = mf.getFecha(selectorFechaIncorporacion);
        String salarioString = txtSalario.getText();
        String comisionString =txtComision.getText();
        String cargo = txtCargo.getText();
        String idJefe = mcb.getComboText(comboIdJefe);
        String codigoDepartamento = mcb.getComboText(comboCodigoDepartamento);
        
        float salario;
        float comision;
        
        if (!mv.validarCampo(id) ||
            !mv.validarCampo(nombreEmpleado) ||
            comboSexo == null ||
            !mv.validarFecha(fechaNacimiento) ||
            !mv.validarFecha(fechaIncorporacion) ||
            !mv.validarCampo(salarioString) ||
            !mv.validarCampo(comisionString) ||
            !mv.validarCampo(cargo) ||
            !mv.validarComboBox(codigoDepartamento))
            {
                JOptionPane.showMessageDialog(null, "No puede dejar campos vacios",  "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        
        try {
            salario = Float.parseFloat(salarioString);
            comision = Float.parseFloat(comisionString);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No puede dejar campos vacios",  "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String sentenciadml = "INSERT INTO empleados"
                + "(nDIEmp, "
                + "nomEmp, "
                + "sexEmp, "
                + "fecNac, "
                + "fecIncorporacion, "
                + "salEmp, "
                + "comisionE, "
                + "cargoE, "
                + "jefeID, "
                + "codDepto) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);";
        
        try
        {      
            PreparedStatement ps = cn.prepareStatement(sentenciadml);
            
            ps.setString(1, id);
            ps.setString(2, nombreEmpleado);
            ps.setString(3, sexo);
            ps.setDate(4, fechaNacimiento);
            ps.setDate(5, fechaIncorporacion);
            ps.setFloat(6, salario);
            ps.setFloat(7, comision);
            ps.setString(8, cargo);
            ps.setString(9, idJefe);
            ps.setString(10, codigoDepartamento);
            
            ps.executeUpdate();
            
            JOptionPane.showMessageDialog(null, "DATOS GUARDADOS CORRECTAMENTE");
            
            mostrarDatos("");
            limpiarCampos();
        }
        catch (SQLException ex)
        {
            JOptionPane.showMessageDialog(null, "Error al registrar al cliente",  "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(null, ex,  "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    /**
     * Maneja el evento del clic del mouse en la tabla de empleados (tablaEmpleados).
     * Actualiza los campos del formulario con los datos del empleado seleccionado en la tabla.
     * Habilita o deshabilita botones según el estado de la selección.
     * 
     * @param evt El evento generado al hacer clic con el mouse en la tabla de empleados.
     */
    private void tablaEmpleadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaEmpleadosMouseClicked
        btnActualizar.setEnabled(true);
        btnRegistrar.setEnabled(false);
        txtId.setEnabled(false);
        int fila = this.tablaEmpleados.getSelectedRow();
        
        this.txtId.setText(this.tablaEmpleados.getValueAt(fila, 0).toString());
        this.txtNombreEmpleado.setText(this.tablaEmpleados.getValueAt(fila, 1).toString());
        
        if (this.tablaEmpleados.getValueAt(fila, 2).toString().equals("M"))
        {
            this.comboSexo.setSelectedItem("Masculino");
        }
        else if (this.tablaEmpleados.getValueAt(fila, 2).toString().equals("F"))
        {
            this.comboSexo.setSelectedItem("Femenino");
        }
        else
        {
            this.comboSexo.setSelectedItem("Elegir");
        }
        
        this.selectorFechaNacimiento.setDate(mf.convertStringToDate(this.tablaEmpleados.getValueAt(fila, 3).toString()));
        this.selectorFechaIncorporacion.setDate(mf.convertStringToDate(this.tablaEmpleados.getValueAt(fila, 4).toString()));
        
        this.txtSalario.setText(this.tablaEmpleados.getValueAt(fila, 5).toString());
        this.txtComision.setText(this.tablaEmpleados.getValueAt(fila, 6).toString());
        this.txtCargo.setText(this.tablaEmpleados.getValueAt(fila, 7).toString());
        
        if (this.tablaEmpleados.getValueAt(fila, 8) == null) {
            this.comboIdJefe.setSelectedItem("Ninguno");
        } else {
            this.comboIdJefe.setSelectedItem(this.tablaEmpleados.getValueAt(fila, 8).toString());
        }
        
        this.comboCodigoDepartamento.setSelectedItem(this.tablaEmpleados.getValueAt(fila, 9).toString());
    }//GEN-LAST:event_tablaEmpleadosMouseClicked
    
    /**
    * Actualiza la tabla de empleados al momento de que el usuario ingresa o modifica el texto en el campo de búsqueda.
    * El método obtiene el texto ingresado en el campo de búsqueda y muestra los empleados que coincidan con ese criterio de búsqueda.
    * 
    * @param evt El evento generado al liberar una tecla mientras el foco está en el campo de búsqueda (txtBuscar).
    */
    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        mostrarDatos(txtBuscar.getText());
    }//GEN-LAST:event_txtBuscarKeyReleased

    /**
     * Actualiza la tabla de empleados cuando el usuario selecciona una opción diferente en el JComboBox "comboBuscarPor".
     * El método obtiene el texto ingresado en el campo de búsqueda y muestra los empleados que coincidan con ese criterio de búsqueda.
     * 
     * @param evt El evento generado al seleccionar una opción diferente en el JComboBox "comboBuscarPor".
     */
    private void comboBuscarPorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBuscarPorActionPerformed
        mostrarDatos(txtBuscar.getText());
    }//GEN-LAST:event_comboBuscarPorActionPerformed

    /**
     * Actualiza la tabla de empleados cuando el usuario selecciona una opción diferente en el JComboBox "comboTipoBusqueda".
     * El método obtiene el texto ingresado en el campo de búsqueda y muestra los empleados que coincidan con ese criterio de búsqueda.
     * 
     * @param evt El evento generado al seleccionar una opción diferente en el JComboBox "comboTipoBusqueda".
     */
    private void comboTipoBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoBusquedaActionPerformed
        mostrarDatos(txtBuscar.getText());
    }//GEN-LAST:event_comboTipoBusquedaActionPerformed

    /**
     * Actualiza la tabla de empleados cuando el usuario selecciona una opción diferente en el JComboBox "comboOrdenar".
     * El método obtiene el texto ingresado en el campo de búsqueda y muestra los empleados que coincidan con ese criterio de búsqueda.
     * 
     * @param evt El evento generado al seleccionar una opción diferente en el JComboBox "comboOrdenar".
     */
    private void comboOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOrdenarActionPerformed
        mostrarDatos(txtBuscar.getText());
    }//GEN-LAST:event_comboOrdenarActionPerformed

    /**
    * Maneja el evento del botón "Actualizar" del formulario.
    * Actualiza los datos del empleado correspondiente en la base de datos con la información ingresada en los campos del formulario.
    * Valida que los campos obligatorios no estén vacíos y que los campos numéricos tengan un formato válido.
    * Después de realizar la actualización, muestra un mensaje de éxito y restablece el formulario para futuras acciones.
    * 
    * @param evt El evento de acción generado por hacer clic en el botón "Actualizar".
    */
    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        String id =txtId.getText();
        String nombreEmpleado = txtNombreEmpleado.getText();
        String sexo = mcb.getSexo(comboSexo);
        java.sql.Date fechaNacimiento = mf.getFecha(selectorFechaNacimiento);
        java.sql.Date fechaIncorporacion = mf.getFecha(selectorFechaIncorporacion);
        String salarioString = txtSalario.getText();
        String comisionString =txtComision.getText();
        String cargo = txtCargo.getText();
        String idJefe = mcb.getComboText(comboIdJefe);
        String codigoDepartamento = mcb.getComboText(comboCodigoDepartamento);
        
        float salario;
        float comision;
        
        if (!mv.validarCampo(id) ||
            !mv.validarCampo(nombreEmpleado) ||
            comboSexo == null ||
            !mv.validarFecha(fechaNacimiento) ||
            !mv.validarFecha(fechaIncorporacion) ||
            !mv.validarCampo(salarioString) ||
            !mv.validarCampo(comisionString) ||
            !mv.validarCampo(cargo) ||
            !mv.validarComboBox(codigoDepartamento))
            {
                JOptionPane.showMessageDialog(null, "No puede dejar campos vacios",  "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        
        try {
            salario = Float.parseFloat(salarioString);
            comision = Float.parseFloat(comisionString);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No puede dejar campos vacios",  "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String sentenciadml = String.format(
            "UPDATE empleados SET "
            + "nomEmp=?, "
            + "sexEmp=?, "
            + "fecNac=?, "
            + "fecIncorporacion=?, "
            + "salEmp=?, "
            + "comisionE=?, "
            + "cargoE=?, "
            + "jefeID=?, "
            + "codDepto=? "
            + "WHERE nDIEmp='%s';"
            , txtId.getText()
        );
        
        System.out.println(sentenciadml);

        try {
            PreparedStatement ps = cn.prepareStatement(sentenciadml);
            
            ps.setString(1, nombreEmpleado);
            ps.setString(2, sexo);
            ps.setDate(3, fechaNacimiento);
            ps.setDate(4, fechaIncorporacion);
            ps.setFloat(5, salario);
            ps.setFloat(6, comision);
            ps.setString(7, cargo);
            ps.setString(8, idJefe);
            ps.setString(9, codigoDepartamento);
            
            int index = ps.executeUpdate();
            
            if (index > 0) {
                JOptionPane.showMessageDialog(null, "DATOS ACTUALIZADOS CORRECTAMENTE", "Operación exitosa", JOptionPane.INFORMATION_MESSAGE);
                btnActualizar.setEnabled(false);
                btnLimpiar.setEnabled(false);
                btnRegistrar.setEnabled(true);
                mostrarDatos(txtBuscar.getText());
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(null, "No seleccionó fila", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "No se pudo actualizar el registro", "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(null, e);
            System.out.println("No se pudo actualizar: " + e);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed
    
    /**
     * Maneja el evento del botón "Eliminar" del menú.
     * Elimina el registro del empleado correspondiente en la base de datos según el ID ingresado en el campo de texto "txtId".
     * Antes de realizar la eliminación, muestra un cuadro de diálogo de confirmación para asegurar que el usuario realmente desea eliminar el registro.
     * Si el usuario confirma la eliminación, se ejecuta la sentencia SQL de eliminación en la base de datos y se actualiza la tabla de empleados.
     * Después de eliminar el registro, se limpian los campos del formulario para dejarlo listo para futuras acciones.
     * 
     * @param evt El evento de acción generado por hacer clic en el botón "Eliminar" del menú (no se usa).
     */
    private void btnMenuEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuEliminarActionPerformed
        String sentenciadml = "DELETE FROM empleados WHERE nDIEmp='" + txtId.getText() + "'";
        Object[] opciones = {"Sí", "No"};
        
        if (JOptionPane.showOptionDialog(null, "¿ESTÁ SEGURO DE QUE DESEA ELIMINAR EL REGISTRO?", "Eliminar registro", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]) == 0) {
            try {
                PreparedStatement ps = cn.prepareStatement(sentenciadml);
                int index = ps.executeUpdate();
                
                if (index > 0) {
                    mostrarDatos(txtBuscar.getText());
                    limpiarCampos();
                } else {
                    JOptionPane.showMessageDialog(null, "No seleccionó fila", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al eliminar los datos",  "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(null, e,  "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println("ERROR AL ELIMINAR LOS DATOS: " + e);
            }
        }
    }//GEN-LAST:event_btnMenuEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JMenuItem btnMenuEliminar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> comboBuscarPor;
    private javax.swing.JComboBox<String> comboCodigoDepartamento;
    private javax.swing.JComboBox<String> comboIdJefe;
    private javax.swing.JComboBox<String> comboOrdenar;
    private javax.swing.JComboBox<String> comboSexo;
    private javax.swing.JComboBox<String> comboTipoBusqueda;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu menuClickDerecho;
    private com.toedter.calendar.JDateChooser selectorFechaIncorporacion;
    private com.toedter.calendar.JDateChooser selectorFechaNacimiento;
    private javax.swing.JTable tablaEmpleados;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCargo;
    private javax.swing.JTextField txtComision;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombreEmpleado;
    private javax.swing.JTextField txtSalario;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Muestra los datos de empleados en la tabla de visualización, filtrados por una búsqueda específica.
     * 
     * @param busqueda La cadena de texto utilizada como criterio de búsqueda para filtrar los empleados en la tabla.
     * 
     * El método realiza las siguientes acciones:
     * 
     * 1. Crea un nuevo modelo de tabla (`DefaultTableModel`) para mostrar los datos de los empleados.
     * 2. Agrega las columnas de la tabla: "ID", "Nombre de Empleado", "Sexo", "Fecha de Nacimiento", "Fecha de Incorporación", "Salario", "Comisión", "Cargo", "ID de Jefe" y "Código de Departamento".
     * 3. Asigna el modelo de tabla recién creado a la tabla de empleados (`tablaEmpleados`).
     * 4. Obtiene el campo de búsqueda para la consulta SQL llamando al método `getBuscarPor(comboBuscarPor)` de la clase `MetodosBusqueda`.
     * 5. Obtiene el formato de búsqueda para la consulta SQL llamando al método `getFormatoBusqueda(busqueda, comboTipoBusqueda)` de la clase `MetodosBusqueda`.
     * 6. Obtiene el criterio de ordenación para la consulta SQL llamando al método `getOrdenarPor(comboOrdenar)` de la clase `MetodosBusqueda`.
     * 7. Construye la consulta SQL utilizando los valores obtenidos en los pasos anteriores y las agrega al `WHERE` y `ORDER BY` para filtrar y ordenar los resultados.
     * 8. Ejecuta la consulta SQL en la base de datos y obtiene el resultado en un objeto `ResultSet`.
     * 9. Itera a través del resultado del `ResultSet` y agrega los datos de cada empleado como una fila en el modelo de tabla.
     * 10. Si ocurre un error durante la consulta o el procesamiento de los datos, muestra un mensaje de error utilizando `JOptionPane`.
     */
    private void mostrarDatos(String busqueda) {
        DefaultTableModel modelo = new TablaNoEditable();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre de Empleado");
        modelo.addColumn("Sexo");
        modelo.addColumn("Fecha de Nacimiento");
        modelo.addColumn("Fecha de Incorporación");
        modelo.addColumn("Salario");
        modelo.addColumn("Comisión");
        modelo.addColumn("Cargo");
        modelo.addColumn("ID de Jefe");
        modelo.addColumn("Código de Departamento");
        
        tablaEmpleados.setModel(modelo);
        String filtro = mb.getBuscarPor(comboBuscarPor);
        String busquedaCompleta = mb.getFormatoBusqueda(busqueda, comboTipoBusqueda);
        String orden = mb.getOrdenarPor(comboOrdenar);
        String consultasql = "SELECT * FROM empleados "+ "WHERE UPPER(" + filtro + ") " + busquedaCompleta + " ORDER BY " + filtro + " " + orden;
        System.out.println(consultasql);
        String data[] = new String[10];
        
        Statement st;
        
        try
        {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(consultasql);
            
            while (rs.next())
            {
                data[0] = rs.getString(1);
                data[1] = rs.getString(2);
                data[2] = rs.getString(3);
                data[3] = rs.getString(4);
                data[4] = rs.getString(5);
                data[5] = rs.getString(6);
                data[6] = rs.getString(7);
                data[7] = rs.getString(8);
                data[8] = rs.getString(9);
                data[9] = rs.getString(10);
                modelo.addRow(data);
            }
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(null, "Error al cargar los datos.",  "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(null, e,  "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("Error al mostrar los datos: " + e);
        }
    }
    
    /**
     * Este método se utiliza para resetear los campos del formulario después de registrar o editar un empleado,
     * dejándolos listos para un nuevo registro o edición.
     */
    private void limpiarCampos() {
        btnActualizar.setEnabled(false);
        btnRegistrar.setEnabled(true);
        txtId.setEnabled(true);
        
        this.txtId.setText("");
        this.txtNombreEmpleado.setText("");
        this.comboSexo.setSelectedItem("Elegir");
        this.selectorFechaNacimiento.setDate(null);
        this.selectorFechaIncorporacion.setDate(null);
        this.txtSalario.setText("");
        this.txtComision.setText("");
        this.txtCargo.setText("");
        this.comboIdJefe.setSelectedItem("Elegir");
        this.comboCodigoDepartamento.setSelectedItem("Elegir");
        
        this.txtBuscar.setText("");
    }
}
